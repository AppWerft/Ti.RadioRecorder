/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package de.appwerft.radiorecorder;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiC;
import org.appcelerator.titanium.TiFileProxy;
import org.appcelerator.titanium.util.Log;
import org.appcelerator.titanium.util.TiConfig;

import android.net.Uri;
import android.os.AsyncTask;

// This proxy can be created by calling Radiorecorder.createExample({message: "hello world"})
@Kroll.proxy(creatableInModule = RadiorecorderModule.class)
public class RecorderProxy extends KrollProxy {
	private String url;
	private Uri uri;
	private int duration;
	private KrollDict notificationParameters;

	public RecorderProxy() {
		super();
	}

	@Override
	public void handleCreationDict(
			@Kroll.argument(optional = true) KrollDict opts) {
		if (opts.containsKeyAndNotNull(TiC.PROPERTY_URL)) {
			try {
				@SuppressWarnings("unused")
				URL dummy = new URL(opts.getString(TiC.PROPERTY_URL));
				url = opts.getString(TiC.PROPERTY_URL);
			} catch (MalformedURLException e) {
				e.printStackTrace();
			}
		}
		if (opts.containsKeyAndNotNull(TiC.PROPERTY_FILE)) {
			Object obj = opts.get(TiC.PROPERTY_FILE);
			if (obj instanceof TiFileProxy) {
				uri = Uri.parse(((TiFileProxy) obj).getNativePath());
			}
		}
		if (opts.containsKeyAndNotNull(TiC.PROPERTY_DURATION)) {
			duration = opts.getInt(TiC.PROPERTY_DURATION);
		}
		if (opts.containsKeyAndNotNull("notification")) {
			notificationParameters = opts.getKrollDict("notification");
		}
		super.handleCreationDict(opts);

	}

	@Kroll.method
	public void start() {
		AsyncTask<Void, Void, Void> doRequest = new RecordHandler();
		doRequest.execute();

	}

	private final class RecordHandler extends AsyncTask<Void, Void, Void> {
		@Override
		protected Void doInBackground(Void... empty) {
			try {
				URLConnection conn = new URL(url).openConnection();
				InputStream inpStream = conn.getInputStream();
				OutputStream outStream = new FileOutputStream(new File(
						uri.getPath()));
				byte[] buffer = new byte[4096];
				int len;
				long t = System.currentTimeMillis();
				while ((len = inpStream.read(buffer)) > 0
						&& System.currentTimeMillis() - t <= duration) {
					outStream.write(buffer, 0, len);
				}
				outStream.close();
			} catch (Exception e) {
				System.out.print(e);
			}
			return null;
		}

		@SuppressWarnings("unused")
		protected void onPostExecute() {
		}
	}
}